<?xml version="1.0" encoding="UTF-8"?>
<!-- logback : 자바프로젝트에서 가장 많이 사용되는 로그 라이브러리인 log4j가 개발 중단된 후 자바의 예외처리를 하기위해 시작된 프로젝트 -->
<!DOCTYPE xml>
<configuration debug="true">
	<!-- Appenders : logback을 사용하여 로그를 어디에 출력할지 설정 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>%d %5p [%c] %m%n</Pattern>
		</encoder>
	</appender>
	
	<appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>%d %5p %m%n</Pattern>
		</encoder>
	</appender>
	
	<!-- logger : 로그를 출력하는 요소, level 속성을 통해서 출력할 로그의 레벨을 조절하여 appender에 전달 -->
	<!-- logger은 지역 로그 설정 -->
	<!-- name : 패키지 명을 입력 -->
	<!-- appender-ref : 로그를 어디에 출력할지 설정, 위의 <appeder> 의 name 을 입력 -->
	
	<!-- 로그 레벨 : 위에서 아래로 내려 갈수록 레벨이 높아짐, 설정한 레벨 이상의 로그만 출력 -->
	<!--trace : 모든 로그를 출력-->
	<!--debug : 개발할 때 디버그 용도로 사용-->
	<!--info : 상태 변경 등과 같은 정보성 메시지를 출력-->
	<!--warn : 프로그램의 실행에는 문제가 없지만 추후 시스템 에러의 원인이 될 수 있다는 경고성 메시지-->
	<!--error : 요청을 처리하던 중 문제가 발생-->
	<logger name="com.btc.board1" level="debug" appender-ref="console" />
	
	<!-- log4jdbc-log4j2 를 위한 logger 부분 -->
	<!-- log4jdbc 가 제공하는 로거 -->
	<!-- jdbc.sqlonly : SQL을 보여줌 -->
	<!-- jdbc.sqltiming : SQL 문의 실행 시간을 밀리초 단위로 보여줌 -->
	<!-- jdbc.audit : ResultSets를 제외한 모든 JDBC 호출 정보를 보여줌 -->
	<!-- jdbc.resultset : ResultSets를 포함한 모든 JDBC 호출 정보를 보여줌 -->
	<!-- jdbc.resulttable : SQL의 조회 결과를 보여줌 -->
	<!-- jdbc.connection : Connection의 연결과 종료에 관한 로그를 보여줌 -->
	<logger name="jdbc.sqlonly" level="info" appender-ref="console-infolog"/>
	<logger name="jdbc.resultsettable" level="info" appender-ref="console-infolog"/>
	
	<!-- 로그 전체 설정, logger 이 있으면 logger이 실행 -->
	<root level="error">
		<appender-ref ref="console"/>
	</root>
</configuration>